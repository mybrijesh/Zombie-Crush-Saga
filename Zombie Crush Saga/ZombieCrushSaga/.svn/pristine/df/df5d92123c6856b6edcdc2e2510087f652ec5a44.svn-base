/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package zombie_crush_saga.ui;

import mini_game.MiniGame;
import mini_game.Sprite;
import mini_game.SpriteType;
import static zombie_crush_saga.ZombieCrushSagaConstants.*;

/**
 *
 * @author Brijesh
 */
public class ZombieCrushSagaTile extends Sprite
{
    private boolean movingToTarget;
    private float targetX;
    private float targetY;
    private int gridColumn;
    private int gridRow;
    private final String tileType;
    public ZombieCrushSagaTile(    SpriteType initSpriteType,
                                    float initX, 	float initY,
                                    float initVx, 	float initVy,
                                    String initState,   String initTileType)
    {
        // SEND ALL THE Sprite DATA TO A Sprite CONSTRUCTOR
        super(initSpriteType, initX, initY, initVx, initVy, initState);
        
                // INIT THE TILE TYPE
        tileType = initTileType;
    }
    public String getTileType()   
    { 
        return tileType;  
    }
    public int getGridColumn() 
    { 
        return gridColumn; 
    }
    public int getGridRow() 
    { 
        return gridRow; 
    }
    public float getTargetX() 
    { 
        return targetX; 
    }
    public float getTargetY() 
    { 
        return targetY; 
    }
    @Override
    public void update(MiniGame game)
    {
        // IF WE ARE IN A POST-WIN STATE WE ARE PLAYING THE WIN
        // ANIMATION, SO MAKE SURE THIS TILE FOLLOWS THE PATH
        if (game.getDataModel().won())
        {
//            updateWinPath(game);
        }
        // IF NOT, IF THIS TILE IS ALMOST AT ITS TARGET DESTINATION,
        // JUST GO TO THE TARGET AND THEN STOP MOVING
        else if (calculateDistanceToTarget() < MAX_TILE_VELOCITY)
        {
            vX = 0;
            vY = 0;
            x = targetX;
            y = targetY;
            movingToTarget = false;
        }
        // OTHERWISE, JUST DO A NORMAL UPDATE, WHICH WILL CHANGE ITS POSITION
        // USING ITS CURRENT VELOCITY.
        else
        {
            super.update(game);
        }
    }
    public boolean isMovingToTarget() 
    {
        return movingToTarget; 
    }
    public void setGridCell(int initGridColumn, int initGridRow)
    {
        gridColumn = initGridColumn;
        gridRow = initGridRow;
    }
    public void setTarget(float initTargetX, float initTargetY) 
    {
        targetX = initTargetX; 
        targetY = initTargetY;        
    }
    public boolean match(ZombieCrushSagaTile testTile)
    {
        //TILE_A_TYPE ARE ONLY MATCHES IF THEY HAVE SAME IMAGES
        if(spriteType.getSpriteTypeID().equals(testTile.getSpriteType().getSpriteTypeID()))
            return true;
        //green zombie and green stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_0") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_8"))
            return true;
        //red zombie and red strippped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_2") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_6"))
            return true;
        //yellow zombie and yellow stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_3") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_9"))
            return true;
        //orange zombie and orange stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_5") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_10"))
            return true;
        //purple zombie and purple stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_4") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_11"))
            return true;
        //blue zombie and blue stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_1") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_7"))
            return true;
        
        
        //green zombie and green stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_8") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_0"))
            return true;
        //red zombie and red strippped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_6") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_2"))
            return true;
        //yellow zombie and yellow stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_9") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_3"))
            return true;
        //orange zombie and orange stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_10") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_5"))
            return true;
        //purple zombie and purple stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_11") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_4"))
            return true;
        //blue zombie and blue stripped zombie
        else if(spriteType.getSpriteTypeID().equals("TILE_7") && testTile.getSpriteType().getSpriteTypeID().equals("TILE_1"))
            return true;
        else
        {
            return false;
        }

    }
    public void startMovingToTarget(int maxVelocity) 
    {
        // LET ITS POSITIONG GET UPDATED
        movingToTarget = true;
        
        // CALCULATE THE ANGLE OF THE TRAJECTORY TO THE TARGET
        float diffX = targetX - x;
        float diffY = targetY - y;
        float tanResult = diffY/diffX;
        float angleInRadians = (float)Math.atan(tanResult);
        
        // COMPUTE THE X VELOCITY COMPONENT
        vX = (float)(maxVelocity * Math.cos(angleInRadians));
        
        // CLAMP THE VELOCTY IN CASE OF NEGATIVE ANGLES
        if ((diffX < 0) && (vX > 0)) vX *= -1;
        if ((diffX > 0) && (vX < 0)) vX *= -1;
        
        // COMPUTE THE Y VELOCITY COMPONENT
        vY = (float)(maxVelocity * Math.sin(angleInRadians));        
        
        // CLAMP THE VELOCITY IN CASE OF NEGATIVE ANGLES
        if ((diffY < 0) && (vY > 0)) vY *= -1;
        if ((diffY > 0) && (vY < 0)) vY *= -1;
    }

    public float calculateDistanceToTarget() 
    {
        // GET THE X-AXIS DISTANCE TO GO
        float diffX = targetX - x;
        
        // AND THE Y-AXIS DISTANCE TO GO
        float diffY = targetY - y;
        
        // AND EMPLOY THE PYTHAGOREAN THEOREM TO CALCULATE THE DISTANCE
        float distance = (float)Math.sqrt((diffX * diffX) + (diffY * diffY));
        
        // AND RETURN THE DISTANCE
        return distance;
    }
}
