/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package zombie_crush_saga.data;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import mini_game.MiniGame;
import mini_game.MiniGameDataModel;
import mini_game.SpriteType;
import properties_manager.PropertiesManager;
import zombie_crush_saga.ui.ZombieCrushSagaMiniGame;
import zombie_crush_saga.ui.ZombieCrushSagaTile;
import static zombie_crush_saga.ZombieCrushSagaConstants.*;
import zombie_crush_saga.ZombieCrushSaga.ZombieCrushSagaPropertyType;

/**
 *
 * @author Brijesh
 */
public class ZombieCrushSagaDataModel extends MiniGameDataModel
{
    // THIS CLASS HAS A REFERERENCE TO THE MINI GAME SO THAT IT
    // CAN NOTIFY IT TO UPDATE THE DISPLAY WHEN THE DATA MODEL CHANGES
    private MiniGame miniGame;
    private ZombieCrushSagaMiniGame game;
    private ZombieCrushSagaMove move;
    
    // THE LEVEL GRID REFERS TO THE LAYOUT FOR A GIVEN LEVEL, MEANING
    // HOW MANY TILES FIT INTO EACH CELL WHEN FIRST STARTING A LEVEL
    private int[][] levelGrid;
    
    // LEVEL GRID DIMENSIONS
    private int gridColumns;
    private int gridRows;
    
    // THIS STORES THE TILES ON THE GRID DURING THE GAME
    private ArrayList<ZombieCrushSagaTile>[][] tileGrid;
    
    // THESE ARE THE TILES THE PLAYER HAS MATCHED
    private ArrayList<ZombieCrushSagaTile> stackTiles;
    
    // THESE ARE THE TILES THAT ARE MOVING AROUND, AND SO WE HAVE TO UPDATE
    private ArrayList<ZombieCrushSagaTile> movingTiles;
    
    // THIS IS A SELECTED TILE, MEANING THE FIRST OF A PAIR THE PLAYER
    // IS TRYING TO MATCH. THERE CAN ONLY BE ONE OF THESE AT ANY TIME
    private ZombieCrushSagaTile selectedTileFirst;
    private ZombieCrushSagaTile selectedTileSecond;
    
    // THE INITIAL LOCATION OF TILES BEFORE BEING PLACED IN THE GRID
    private int unassignedTilesX;
    private int unassignedTilesY;
    
    // THESE ARE USED FOR TIMING THE GAME
    private GregorianCalendar startTime;
    private GregorianCalendar endTime;
    
    // THE REFERENCE TO THE FILE BEING PLAYED
    private String currentLevel;
    
    public ZombieCrushSagaDataModel(ZombieCrushSagaMiniGame initMiniGame) 
    {
        miniGame = initMiniGame;
        game = new ZombieCrushSagaMiniGame();
        move = new ZombieCrushSagaMove();
        // INIT THESE FOR HOLDING MATCHED AND MOVING TILES
        stackTiles = new ArrayList();
        movingTiles = new ArrayList();
        selectedTileFirst = null;
        selectedTileSecond = null;
    }
    
    public void initTiles()
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        String imgPath = props.getProperty(ZombieCrushSagaPropertyType.IMG_PATH);
        int spriteTypeID = 0;
        SpriteType sT;
        
        
//        // WE'LL RENDER ALL THE TILES ON TOP OF THE BLANK TILE
//        String blankTileFileName = props.getProperty(ZombieCrushSagaPropertyType.BLANK_TILE_IMAGE_NAME);
//        BufferedImage blankTileImage = miniGame.loadImageWithColorKey(imgPath + blankTileFileName, COLOR_KEY);
//        ((ZombieCrushSagaPanel)(miniGame.getCanvas())).setBlankTileImage(blankTileImage);
//        
//        // THIS IS A HIGHLIGHTED BLANK TILE FOR WHEN THE PLAYER SELECTS ONE
//        String blankTileSelectedFileName = props.getProperty(ZombieCrushSagaPropertyType.BLANK_TILE_SELECTED_IMAGE_NAME);
//        BufferedImage blankTileSelectedImage = miniGame.loadImageWithColorKey(imgPath + blankTileSelectedFileName, COLOR_KEY);
//        ((ZombieCrushSagaPanel)(miniGame.getCanvas())).setBlankTileSelectedImage(blankTileSelectedImage);
        ArrayList<String> typeATiles = props.getPropertyOptionsList(ZombieCrushSagaPropertyType.TILE_A_TYPE);
        for(int i = 0; i< typeATiles.size();i++)
        {
            String imgFile = imgPath + typeATiles.get(i);
            sT = initTileSpriteType(imgFile, TILE_SPRITE_TYPE_PREFIX + spriteTypeID);
            for (int j = 0; j < 7; j++)
            {
                initTile(sT, TILE_A_TYPE);
                //WE CAN USE THIS IF STATMENT TO SET AMOUNT OF TILES PER LEVEL
                if(stackTiles.size() >=40)
                    break;
            }
            spriteTypeID++;
        }

    }
    private void initTile(SpriteType sT, String tileType) 
    {
        ZombieCrushSagaTile newTile = new ZombieCrushSagaTile(sT, unassignedTilesX,unassignedTilesY, 0, 0, INVISIBLE_STATE, tileType);
        stackTiles.add(newTile);
    }
    
    public void initLevelGrid(int[][] initGrid, int initGridColumns, int initGridRows) 
    {
        levelGrid = initGrid;
        gridColumns = initGridColumns;
        gridRows = initGridRows;
        
        tileGrid = new ArrayList[gridColumns][gridRows];
        for(int i = 0; i<gridColumns;i++)
        {
            for(int j=0;j<gridRows;j++)
            {
                tileGrid[i][j] = new ArrayList();
            }
        }
        enableTiles(true);
    }
    private SpriteType initTileSpriteType(String imgFile, String spriteTypeID) 
    {
        SpriteType sT = new SpriteType(spriteTypeID);
        addSpriteType(sT);
        
        BufferedImage img = miniGame.loadImageWithColorKey(imgFile, COLOR_KEY);
        Image tempImage = img.getScaledInstance(TILE_IMAGE_WIDTH, TILE_IMAGE_HEIGHT, BufferedImage.SCALE_SMOOTH);
        img = new BufferedImage(TILE_IMAGE_WIDTH, TILE_IMAGE_HEIGHT, BufferedImage.TYPE_INT_ARGB);
        img.getGraphics().drawImage(tempImage, 0, 0, null);
        
        sT.addState(INVISIBLE_STATE, img);
        sT.addState(VISIBLE_STATE, img);
        sT.addState(SELECTED_STATE, img);
        sT.addState(INCORRECTLY_SELECTED_STATE, img);
        return sT;
    }
    
    // ACCESSOR METHODS

    /**
     * Accessor method for getting the level currently being played.
     * 
     * @return The level name used currently for the game screen.
     */
    public String getCurrentLevel() 
    { 
        return currentLevel; 
    }

    /**
     * Accessor method for getting the number of tile columns in the game grid.
     * 
     * @return The number of columns (left to right) in the grid for the level
     * currently loaded.
     */
    public int getGridColumns() 
    { 
        return gridColumns; 
    }
    
    /**
     * Accessor method for getting the number of tile rows in the game grid.
     * 
     * @return The number of rows (top to bottom) in the grid for the level
     * currently loaded.
     */
    public int getGridRows() 
    { 
        return gridRows; 
    }

    /**
     * Accessor method for getting the tile grid, which has all the
     * tiles the user may select from.
     * 
     * @return The main 2D grid of tiles the user selects tiles from.
     */
    public ArrayList<ZombieCrushSagaTile>[][] getTileGrid() 
    { 
        return tileGrid; 
    }
    
    /**
     * Accessor method for getting the stack tiles.
     * 
     * @return The stack tiles, which are the tiles the matched tiles
     * are placed in.
     */
    public ArrayList<ZombieCrushSagaTile> getStackTiles()
    {
        return stackTiles;
    }

    /**
     * Accessor method for getting the moving tiles.
     * 
     * @return The moving tiles, which are the tiles currently being
     * animated as they move around the game. 
     */
    public Iterator<ZombieCrushSagaTile> getMovingTiles()
    {
        return movingTiles.iterator();
    }
    public void setCurrentLevel(String initCurrentLevel) 
    {
        currentLevel = initCurrentLevel;
    }
    public int calculateTileXInGrid(int column, int z) 
    {
        int cellWidth = TILE_IMAGE_WIDTH;
        float leftEdge = miniGame.getBoundaryLeft();
        return (int)(leftEdge + (cellWidth * column)-(Z_TILE_OFFSET * z));
    }
    public int calculateTileYInGrid(int row, int z) 
    {
        int cellHeight = TILE_IMAGE_HEIGHT;
        float topEdge = miniGame.getBoundaryTop();
        return (int)(topEdge + (cellHeight * row) - (Z_TILE_OFFSET * z));
    }
    /*
     * THIS METHOD CHANGES X PIXEL INTO
     * X-COORDIANTE
     */
    public int calculateGridCellColumn(int x)
    {
        float leftEdge = miniGame.getBoundaryLeft();
        x = (int)(x - leftEdge);
        return x / TILE_IMAGE_WIDTH;
    }
    /*
     * THIS METHOD CHANGES Y PIXEL INTO
     * Y-COORDINATE
     */
    public int calculateGridCellRow(int y)
    {
        float topEdge = miniGame.getBoundaryTop();
        y = (int)(y - topEdge);
        return y / TILE_IMAGE_HEIGHT;
    }
    /*
     * THIS METHOD SHOWS/HIDE THE TILES GRID
     */
    public void enableTiles(boolean enable) 
    {
        // PUT ALL THE TILES IN ONE PLACE WHERE WE CAN PROCESS THEM TOGETHER
        moveAllTilesToStack();
        
        // GO THROUGH ALL OF THEM 
        for (ZombieCrushSagaTile tile : stackTiles)
        {
            // AND SET THEM PROPERLY
            if (enable)
                tile.setState(VISIBLE_STATE);
            else
                tile.setState(INVISIBLE_STATE);
        }  
    }
    /*
     * THIS METHOD MOVES ALL THE TILE TO STACK
     */
    public void moveAllTilesToStack() 
    {
        for (int i = 0; i < gridColumns; i++)
        {
            for (int j = 0; j < gridRows; j++)
            {
                ArrayList<ZombieCrushSagaTile> cellStack = tileGrid[i][j];
                moveTiles(cellStack, stackTiles);
            }
        }  
    }
    private void moveTiles(ArrayList<ZombieCrushSagaTile> from, ArrayList<ZombieCrushSagaTile> to) 
    {
        // GO THROUGH ALL THE TILES, TOP TO BOTTOM
        for (int i = from.size()-1; i >= 0; i--)
        {
            ZombieCrushSagaTile tile = from.remove(i);
            
            // ONLY ADD IT IF IT'S NOT THERE ALREADY
            if (!to.contains(tile))
                to.add(tile);
        } 
    }
    /**
     * This method attempts to select the selectTile argument. Note that
     * this may be the first or second selected tile. If a tile is already
     * selected, it will attempt to process a match/move.
     * 
     * @param selectTile The tile to select.
     */
    public void selectTile(ZombieCrushSagaTile selectTile)
    {
//      IF IT'S ALREADY THE SELECTED TILE, DESELECT IT
        if (selectTile == selectedTileSecond)
        {
            selectedTileSecond = null;
            selectTile.setState(VISIBLE_STATE);
        }
//      IF IT'S ALREADY THE SELECTED TILE, DESELECT IT
        else if (selectTile == selectedTileFirst)
        {
            selectedTileFirst = selectedTileSecond;
            selectedTileSecond = null;
            selectTile.setState(VISIBLE_STATE);
        }
        else
        {
//          CHECK TO SEE IF NOT MORE THEN TWO TILES ARE SELECTED 
            if((selectedTileFirst != null && selectedTileSecond != null))
            {
                selectedTileFirst.setState(VISIBLE_STATE);
                selectedTileSecond.setState(VISIBLE_STATE);
                selectedTileFirst = null;
                selectedTileSecond = null;
                return;
            }
            // IF FIRST SELECTION IS MADE
            if (selectedTileFirst == null)
            {
                selectedTileFirst = selectTile;
                selectedTileFirst.setState(SELECTED_STATE);
            }
            else
            {
                //CHEKCING TO SEE IF THE TILE USER SELECTED IS NEXT TO
                //OUR FIRST SELECTED TILE
                checkIfSelectTile2Possible(selectedTileFirst,selectTile);
                //SWAPPING THE TILES
                swapTiles();
                //SINCE WE SWAP THE TILES THEN WE ALSO WANT TO 
                //CHANGE OUR COLUMNS AND ROW IN MOVE CLASS
                swapMovePosition();
                
//                //CHECK IF WE HAVE MATCH
//                if(matchFound())
//                {
//                    //WE HAVE A MATCH SO PROCESS THE MOVE
//                    processMove();
//                }
                
                matchFound();
                
                //MAKE SURE NEW TILES CAN BE SELECTED
                selectedTileFirst = null;
                selectedTileSecond = null;
            }
            
        }
    }
    /*
     * Checking if Second tile is next to first tile
     */
    public void checkIfSelectTile2Possible(ZombieCrushSagaTile selectTile1, ZombieCrushSagaTile selectTile2)
    {
            //CHECKING IF THE SECOND TILE SELECTED IS IN THE LEFT OF FIRST SELECTED TILE
            if(selectTile1.getGridColumn() == selectTile2.getGridColumn()+1
                    && selectTile1.getGridRow()== selectTile2.getGridRow())
            {
                selectedTileSecond = selectTile2;
                selectTile2.setState(SELECTED_STATE);
            }
            //CHECKING IF THE SECOND TILE SELECTED IS IN THE RIGHT OF FIRST SELECTED TILE
            else if(selectTile1.getGridColumn() == selectTile2.getGridColumn()-1
                    && selectTile1.getGridRow() == selectTile2.getGridRow())
            {
                selectedTileSecond = selectTile2;
                selectTile2.setState(SELECTED_STATE);
            }
            //CHECKING IF THE SECOND TILE SELECTED IS UPPER OF FIRST SELECTED TILE
            else if(selectTile1.getGridColumn() == selectTile2.getGridColumn()
                    && selectTile1.getGridRow()-1 == selectTile2.getGridRow())
            {
                selectedTileSecond = selectTile2;
                selectTile2.setState(SELECTED_STATE);
            }
            //CHECKING IF THE SECOND TILE SELECTED IS BELLOW OF FIRST SELECTED TILE
            else if(selectTile1.getGridColumn() == selectTile2.getGridColumn()
                    && selectTile1.getGridRow()+1 == selectTile2.getGridRow())
            {
                selectedTileSecond = selectTile2;
                selectTile2.setState(SELECTED_STATE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Wrong Move!! TRY AGAIN");
                selectTile1.setState(VISIBLE_STATE);
                selectTile2.setState(VISIBLE_STATE);
                selectedTileFirst.setState(VISIBLE_STATE);
                selectedTileFirst = null;
                selectedTileSecond = null;
                return;
            }
            //ASSIGN THE MOVE CLASS THE ORIGINAL
            //FIRST SELECTION AND SECOND SELECTION
            //COLUMNS AND ROWS
            move.col1 = selectTile1.getGridColumn();
            move.row1 = selectTile1.getGridRow();
            move.col2 = selectTile2.getGridColumn();
            move.row2 = selectTile2.getGridRow();
            //MAKING THE TILES VISIBLE BACK AGAIN
            selectTile1.setState(VISIBLE_STATE);
            selectTile2.setState(VISIBLE_STATE);
    }
    /*
     * This method trys all kind of possible ways that tile can be matched
     * it can be matched as
     * 3 in row
     * 3 in columns
     * T shape but it can be T-shape, rotated left, rotated rigt 
     * or flipped 
     * 
     * for this method we can use some pre-created method of own to figure
     * this out
     * 
     * checkLeftOfTile(int col, int row)
     * checkRightOfTile(int col, int row)
     * checkUpOfTile(int col, int row)
     * checkDownOfTile(int col, int row)
     */
    public void matchFound()
    {
        int col1 = move.col1;
        int col2 = move.col2;
        int row1 = move.row1;
        int row2 = move.row2;
        int count;
        
        //WE FIRST CHECK FOR FIRST TILE SELECTED
        count = checkLeftOfTile(col1,row1);
        if(count >= 3)
        {
            System.out.println("INTO MATCH FOUND COUNT >= 3");
            processMove(col1, row1, count, "LEFT");
        }
    }
    /*
     * This Method swaps the zombie
     */
    public void swapTiles()
    {
        int saw_velocity = 10;
        ArrayList<ZombieCrushSagaTile> stack1 = tileGrid[move.col1][move.row1];
        ArrayList<ZombieCrushSagaTile> stack2 = tileGrid[move.col2][move.row2];
        ZombieCrushSagaTile tile1 = stack1.get(stack1.size()-1);
        ZombieCrushSagaTile tile2 = stack2.get(stack2.size()-1);
        //MAKING THE BOTH TILES VISIBLE
        tile1.setState(VISIBLE_STATE);
        tile2.setState(VISIBLE_STATE);
        //SWAP THEM
        tile1.setTarget(tile2.getX(), tile2.getY());
        tile1.startMovingToTarget(saw_velocity);
        tile2.setTarget(tile1.getX(), tile1.getY());
        tile2.startMovingToTarget(saw_velocity);
        System.out.println("Tile1 X:"+tile1.getGridColumn()+" Y: "+tile1.getGridRow());
        System.out.println("Tile2 X:"+tile2.getGridColumn()+" Y: "+tile2.getGridRow());
        movingTiles.add(tile1);
        movingTiles.add(tile2);
        
        /*
         * SWAPPING THE ZOMBIE ONLY CHANGES ANNIMATION
         * NOT GRID COLUMNS AND ROW
         * SO NOW WE SWAP THEIR COLUMNS AND ROWS
         */
        int tile2Col = tile2.getGridColumn();
        int tile2Row = tile2.getGridRow();
        tile2.setGridCell(tile1.getGridColumn(), tile1.getGridRow());
        tile1.setGridCell(tile2Col, tile2Row);
        
        //ADDING BACK TO STACK
        stack1.add(tile1);
        stack2.add(tile2);
        
        //ADDING STACK BACK TO GRID
        tileGrid[tile2.getGridColumn()][tile2.getGridRow()] = stack2;
        tileGrid[tile1.getGridColumn()][tile1.getGridRow()] = stack1;
    }
    public void swapMovePosition()
    {
        int col = move.col1;
        int row = move.row1;
        move.col1 = move.col2;
        move.row1 = move.row2;
        move.col2 = col;
        move.row2 = row;
    }
     /**
     * This method updates all the necessary state information
     * to process the move argument.
     * 
     * This method will get
     * col, row of tile 
     * x is number to tiles matched 
     * direction is LEFT,RIGHT,UP,DOWN,UPDOWN,LEFTRIGHT
     * 
     * @param move The move to make. Note that a move specifies
     * the cell locations for a match.
     */
    public void processMove(int col, int row, int x, String direction)
    {
        if(direction.equals("LEFT"))
        {
            
        }
    }
    /*
     * this method is only used to check the all the
     * checkLeft checkRight and all other methods
     * does not do anything
     */
    private void checkingAll()
    {
        //1 because we have to include the zombie we swapping
        //to count on new zombie found count.
        int numLeftRight = 1;
        int numUpDown = 1;
        
        //CHECKING THIS FOR FIRST TILE SELECTED
        System.out.println("Tile1:");
        numLeftRight += checkLeftOfTile(move.col1,move.row1);
        numLeftRight += checkRightOfTile(move.col1,move.row1);
        numUpDown += checkUpOfTile(move.col1,move.row1);
        numUpDown += checkDownOfTile(move.col1,move.row1);
        //CHECKING THIS FOR SECOND TILE SELECTED
        numLeftRight = 1;
        numUpDown = 1;
        System.out.println("Tile2: ");
        numLeftRight += checkLeftOfTile(move.col2,move.row2);
        numLeftRight += checkRightOfTile(move.col2,move.row2);
        numUpDown += checkUpOfTile(move.col2,move.row2);
        numUpDown += checkDownOfTile(move.col2,move.row2);
//        swapTiles();
    }
    public int checkLeftOfTile(int col, int row)
    {
        int col1 = col;
        int row1 = row;
        int count = 1;
        ArrayList<ZombieCrushSagaTile> stack1 = tileGrid[col1][row1];
        ZombieCrushSagaTile tile1 = stack1.get(stack1.size()-1);

        //CHECKING THE LEFT SIDE OF THE ZOMBIE FOR MATCH
        for(int i = col1-1; i>=0 ; i--)
        {
            ArrayList<ZombieCrushSagaTile> stack2 = tileGrid[i][row1];
            ZombieCrushSagaTile tile2 = stack2.get(stack2.size()-1);
            if(tile1.match(tile2))
            {
                count++;
            }
            else
            {
                break;
            }
        }
        System.out.println("countLeft: "+count);
        return count;
    }
    public int checkRightOfTile(int col, int row)
    {
        int col1 = col;
        int row1 = row;
        int count = 1;
        
        ArrayList<ZombieCrushSagaTile> stack1 = tileGrid[col1][row1];
        ZombieCrushSagaTile tile1 = stack1.get(stack1.size()-1);
        //CHECKING THE RIGHT SIDE OF THE ZOMBIE FOR MATCH
        for(int i = col1+1; i<gridColumns ; i++)
        {
            ArrayList<ZombieCrushSagaTile> stack2 = tileGrid[i][row1];
            ZombieCrushSagaTile tile2 = stack2.get(stack2.size()-1);
            if(tile1.match(tile2))
            {
                count++;
            }
            else
            {
                break;
            }
        }
        System.out.println("countRight: "+count);
        return count;
    }
    public int checkUpOfTile(int col, int row)
    {
        int col1 = col;
        int row1 = row;
        int count = 1;
        
        ArrayList<ZombieCrushSagaTile> stack1 = tileGrid[col1][row1];
        ZombieCrushSagaTile tile1 = stack1.get(stack1.size()-1);
        //CHECKING THE RIGHT SIDE OF THE ZOMBIE FOR MATCH
        for(int i = row1-1; i>=0 ; i--)
        {
            ArrayList<ZombieCrushSagaTile> stack2 = tileGrid[col1][i];
            ZombieCrushSagaTile tile2 = stack2.get(stack2.size()-1);
            if(tile1.match(tile2))
            {
                count++;
            }
            else
            {
                break;
            }
        }
        System.out.println("countUp: "+count);
        return count;
    }
        public int checkDownOfTile(int col, int row)
    {
        int col1 = col;
        int row1 = row;
        int count = 1;
        
        ArrayList<ZombieCrushSagaTile> stack1 = tileGrid[col1][row1];
        ZombieCrushSagaTile tile1 = stack1.get(stack1.size()-1);
        //CHECKING THE RIGHT SIDE OF THE ZOMBIE FOR MATCH
        for(int i = row1+1; i<gridRows; i++)
        {
            ArrayList<ZombieCrushSagaTile> stack2 = tileGrid[col][i];
            ZombieCrushSagaTile tile2 = stack2.get(stack2.size()-1);
            if(tile1.match(tile2))
            {
                count++;
            }
            else
            {
                break;
            }
        }
        System.out.println("countDown: "+count);
        return count;
    }
    /*
     * This method checks if there is any button click on grid 
     */
    @Override
    public void checkMousePressOnSprites(MiniGame game, int x, int y) 
    {
        // FIGURE OUT THE CELL IN THE GRID
        int col = calculateGridCellColumn(x);
        int row = calculateGridCellRow(y);
        if((col<0 || col > this.gridColumns)||(row<0 || row>this.gridRows))
        {
            JOptionPane.showMessageDialog(null, "PLEASE CLICK INSIDE THE GAME GRID");
        }
        else
        {
            System.out.println("col: "+col);
            System.out.println("row: "+row);
//          CHECK THE TOP OF THE STACK AT col, row
            ArrayList<ZombieCrushSagaTile> tileStack = tileGrid[col][row];
            if (tileStack.size() >= 0)
            {
                // GET AND TRY TO SELECT THE TOP TILE IN THAT CELL, IF THERE IS ONE
                ZombieCrushSagaTile testTile = tileStack.get(tileStack.size()-1);
                if (testTile.containsPoint(x, y))
                    selectTile(testTile);            
            }
        }   
    }
   @Override
    public void endGameAsWin()
    {

    }
    @Override
    public void reset(MiniGame game) 
    {
        // PUT ALL THE TILES IN ONE PLACE AND MAKE THEM VISIBLE
        moveAllTilesToStack();
        for (ZombieCrushSagaTile tile : stackTiles)
        {
            tile.setX(TILE_STACK_X);
            tile.setY(TILE_STACK_Y);
            tile.setState(VISIBLE_STATE);
        }        

        // RANDOMLY ORDER THEM
        Collections.shuffle(stackTiles);
        
        // START THE CLOCK
        startTime = new GregorianCalendar();
        System.out.println(stackTiles.size());
        // NOW LET'S REMOVE THEM FROM THE STACK
        // AND PUT THE TILES IN THE GRID        
        for (int i = 0; i < gridColumns; i++)
        {
            for (int j = 0; j < gridRows; j++)
            {
                for (int k = 0; k < levelGrid[i][j]; k++)
                {
                    // TAKE THE TILE OUT OF THE STACK
                    ZombieCrushSagaTile tile = stackTiles.remove(stackTiles.size()-1);
                    
                    // PUT IT IN THE GRID
                    tileGrid[i][j].add(tile);
                    tile.setGridCell(i, j);
                    
                    // WE'LL ANIMATE IT GOING TO THE GRID, SO FIGURE
                    // OUT WHERE IT'S GOING AND GET IT MOVING
                    float x = calculateTileXInGrid(i, k);
                    float y = calculateTileYInGrid(j, k);
                    tile.setTarget(x, y);
                    tile.startMovingToTarget(MAX_TILE_VELOCITY);
                    movingTiles.add(tile);
                }
            }
        }        
        // AND START ALL UPDATES
        beginGame();
    }

    @Override
    public void updateAll(MiniGame game) 
    {
       // MAKE SURE THIS THREAD HAS EXCLUSIVE ACCESS TO THE DATA
        try
        {
            game.beginUsingData();
        
            // WE ONLY NEED TO UPDATE AND MOVE THE MOVING TILES
            for (int i = 0; i < movingTiles.size(); i++)
            {
                // GET THE NEXT TILE
                ZombieCrushSagaTile tile = movingTiles.get(i);
            
                // THIS WILL UPDATE IT'S POSITION USING ITS VELOCITY
                tile.update(game);
            
                // IF IT'S REACHED ITS DESTINATION, REMOVE IT
                // FROM THE LIST OF MOVING TILES
                if (!tile.isMovingToTarget())
                {
                    movingTiles.remove(tile);
                }
            }
        
            // IF THE GAME IS STILL ON, THE TIMER SHOULD CONTINUE
            if (inProgress())
            {
                // KEEP THE GAME TIMER GOING IF THE GAME STILL IS
                endTime = new GregorianCalendar();
            }
        }
        finally
        {
            // MAKE SURE WE RELEASE THE LOCK WHETHER THERE IS
            // AN EXCEPTION THROWN OR NOT
            game.endUsingData();
        }
    }

    @Override
    public void updateDebugText(MiniGame game) 
    {        

    }
}
