/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package zombie_crush_saga.data;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collections;
import java.util.GregorianCalendar;
import mini_game.MiniGame;
import mini_game.MiniGameDataModel;
import mini_game.SpriteType;
import properties_manager.PropertiesManager;
import zombie_crush_saga.ui.ZombieCrushSagaMiniGame;
import zombie_crush_saga.ui.ZombieCrushSagaTile;
import static zombie_crush_saga.ZombieCrushSagaConstants.*;
import zombie_crush_saga.ZombieCrushSaga.ZombieCrushSagaPropertyType;

/**
 *
 * @author Brijesh
 */
public class ZombieCrushSagaDataModel extends MiniGameDataModel
{
    // THIS CLASS HAS A REFERERENCE TO THE MINI GAME SO THAT IT
    // CAN NOTIFY IT TO UPDATE THE DISPLAY WHEN THE DATA MODEL CHANGES
    private MiniGame miniGame;
    private ZombieCrushSagaMiniGame game;
    
    // THE LEVEL GRID REFERS TO THE LAYOUT FOR A GIVEN LEVEL, MEANING
    // HOW MANY TILES FIT INTO EACH CELL WHEN FIRST STARTING A LEVEL
    private int[][] levelGrid;
    
    // LEVEL GRID DIMENSIONS
    private int gridColumns;
    private int gridRows;
    
    // THIS STORES THE TILES ON THE GRID DURING THE GAME
    private ArrayList<ZombieCrushSagaTile>[][] tileGrid;
    
    // THESE ARE THE TILES THE PLAYER HAS MATCHED
    private ArrayList<ZombieCrushSagaTile> stackTiles;
    
    // THESE ARE THE TILES THAT ARE MOVING AROUND, AND SO WE HAVE TO UPDATE
    private ArrayList<ZombieCrushSagaTile> movingTiles;
    
    // THIS IS A SELECTED TILE, MEANING THE FIRST OF A PAIR THE PLAYER
    // IS TRYING TO MATCH. THERE CAN ONLY BE ONE OF THESE AT ANY TIME
    private ZombieCrushSagaTile selectedTile;
    
    // THE INITIAL LOCATION OF TILES BEFORE BEING PLACED IN THE GRID
    private int unassignedTilesX;
    private int unassignedTilesY;
    
    // THESE ARE USED FOR TIMING THE GAME
    private GregorianCalendar startTime;
    private GregorianCalendar endTime;
    
    // THE REFERENCE TO THE FILE BEING PLAYED
    private String currentLevel;
    
    public ZombieCrushSagaDataModel(ZombieCrushSagaMiniGame initMiniGame) 
    {
        miniGame = initMiniGame;
        game = new ZombieCrushSagaMiniGame();
        
        // INIT THESE FOR HOLDING MATCHED AND MOVING TILES
        stackTiles = new ArrayList();
        movingTiles = new ArrayList();
    }

    @Override
    public void checkMousePressOnSprites(MiniGame game, int x, int y) 
    {
       
    }

    @Override
    public void reset(MiniGame game) 
    {
        // PUT ALL THE TILES IN ONE PLACE AND MAKE THEM VISIBLE
        moveAllTilesToStack();
        for (ZombieCrushSagaTile tile : stackTiles)
        {
            tile.setX(0);
            tile.setY(0);
            tile.setState(VISIBLE_STATE);
        }        

        // RANDOMLY ORDER THEM
        Collections.shuffle(stackTiles);
        
        // START THE CLOCK
        startTime = new GregorianCalendar();
        System.out.println(stackTiles.size());
        // NOW LET'S REMOVE THEM FROM THE STACK
        // AND PUT THE TILES IN THE GRID        
        for (int i = 0; i < gridColumns; i++)
        {
            for (int j = 0; j < gridRows; j++)
            {
                for (int k = 0; k < levelGrid[i][j]; k++)
                {
                    // TAKE THE TILE OUT OF THE STACK
                    ZombieCrushSagaTile tile = stackTiles.remove(stackTiles.size()-1);
                    
                    // PUT IT IN THE GRID
                    tileGrid[i][j].add(tile);
                    tile.setGridCell(i, j);
                    
                    // WE'LL ANIMATE IT GOING TO THE GRID, SO FIGURE
                    // OUT WHERE IT'S GOING AND GET IT MOVING
                    float x = calculateTileXInGrid(i, k);
                    float y = calculateTileYInGrid(j, k);
                    tile.setTarget(x, y);
                    tile.startMovingToTarget(MAX_TILE_VELOCITY);
                    movingTiles.add(tile);
                }
            }
        }        
        // AND START ALL UPDATES
        beginGame();
    }

    @Override
    public void updateAll(MiniGame game) 
    {
       // MAKE SURE THIS THREAD HAS EXCLUSIVE ACCESS TO THE DATA
        try
        {
            game.beginUsingData();
        
            // WE ONLY NEED TO UPDATE AND MOVE THE MOVING TILES
            for (int i = 0; i < movingTiles.size(); i++)
            {
                // GET THE NEXT TILE
                ZombieCrushSagaTile tile = movingTiles.get(i);
            
                // THIS WILL UPDATE IT'S POSITION USING ITS VELOCITY
                tile.update(game);
            
                // IF IT'S REACHED ITS DESTINATION, REMOVE IT
                // FROM THE LIST OF MOVING TILES
                if (!tile.isMovingToTarget())
                {
                    movingTiles.remove(tile);
                }
            }
        
            // IF THE GAME IS STILL ON, THE TIMER SHOULD CONTINUE
            if (inProgress())
            {
                // KEEP THE GAME TIMER GOING IF THE GAME STILL IS
                endTime = new GregorianCalendar();
            }
        }
        finally
        {
            // MAKE SURE WE RELEASE THE LOCK WHETHER THERE IS
            // AN EXCEPTION THROWN OR NOT
            game.endUsingData();
        }
    }

    @Override
    public void updateDebugText(MiniGame game) 
    {
     
    }

    public void initLevelGrid(int[][] initGrid, int initGridColumns, int initGridRows) 
    {
        levelGrid = initGrid;
        gridColumns = initGridColumns;
        gridRows = initGridRows;
        
        tileGrid = new ArrayList[gridColumns][gridRows];
        for(int i = 0; i<gridColumns;i++)
        {
            for(int j=0;j<gridRows;j++)
            {
                tileGrid[i][j] = new ArrayList();
            }
        }
        enableTiles(true);
    }
    public void initTiles()
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        String imgPath = props.getProperty(ZombieCrushSagaPropertyType.IMG_PATH);
        int spriteTypeID = 0;
        SpriteType sT;
        
        ArrayList<String> typeATiles = props.getPropertyOptionsList(ZombieCrushSagaPropertyType.TILE_A_TYPE);
        for(int i = 0; i< typeATiles.size();i++)
        {
            String imgFile = imgPath + typeATiles.get(i);
            sT = initTileSpriteType(imgFile, TILE_SPRITE_TYPE_PREFIX + spriteTypeID);
            for (int j = 0; j < 4; j++)
                initTile(sT, TILE_A_TYPE);
            spriteTypeID++;
        }
    }

    public void setCurrentLevel(String levelName) 
    {
        currentLevel = levelName;
    }

    public void enableTiles(boolean enable) 
    {
        moveAllTilesToStack();
        
        for(ZombieCrushSagaTile tile : stackTiles)
        {
            if(enable)
                tile.setState(VISIBLE_STATE);
            else
                tile.setState(INVISIBLE_STATE);
        }
    }

    public void moveAllTilesToStack() 
    {
        for(int i =0; i<gridColumns; i++)
        {
            for(int j=0;j<gridRows;j++)
            {
                ArrayList<ZombieCrushSagaTile> cellStack = tileGrid[i][j];
                moveTiles(cellStack, stackTiles);
            }
        }
    }

    private void moveTiles(ArrayList<ZombieCrushSagaTile> from, ArrayList<ZombieCrushSagaTile> to) 
    {
        for(int i =from.size()-1;i >= 0; i--)
        {
            ZombieCrushSagaTile tile = from.remove(i);
            if(!to.contains(tile))
                to.add(tile);
        }
    }

    public int getGridColumns() 
    {
        return gridColumns;
    }
    public int getGridRows()
    {
        return gridRows;
    }

    private SpriteType initTileSpriteType(String imgFile, String id) 
    {
        SpriteType sT = new SpriteType(id);
        addSpriteType(sT);
        
        BufferedImage img = miniGame.loadImageWithColorKey(imgFile, COLOR_KEY);
        Image tempImage = img.getScaledInstance(TILE_IMAGE_WIDTH, TILE_IMAGE_HEIGHT, BufferedImage.SCALE_SMOOTH);
        img = new BufferedImage(TILE_IMAGE_WIDTH, TILE_IMAGE_HEIGHT, BufferedImage.TYPE_INT_ARGB);
        img.getGraphics().drawImage(tempImage, 0, 0, null);
        
        sT.addState(INVISIBLE_STATE, img);
        sT.addState(VISIBLE_STATE, img);
        sT.addState(SELECTED_STATE, img);
        sT.addState(INCORRECTLY_SELECTED_STATE, img);
        return sT;
    }

    private void initTile(SpriteType sT, String tileType) 
    {
        ZombieCrushSagaTile newTile = new ZombieCrushSagaTile(sT, unassignedTilesX,unassignedTilesY, 0, 0, INVISIBLE_STATE, tileType);
        stackTiles.add(newTile);
    }

    public float calculateTileXInGrid(int column, int z) 
    {
        int cellWidth = TILE_IMAGE_WIDTH;
        float leftEdge = miniGame.getBoundaryLeft();
        return (int)(leftEdge + (cellWidth * column)-(Z_TILE_OFFSET * z));
    }

    public float calculateTileYInGrid(int row, int z) 
    {
        int cellHeight = TILE_IMAGE_HEIGHT;
        float topEdge = miniGame.getBoundaryTop();
        return (int)(topEdge + (cellHeight * row) - (Z_TILE_OFFSET * z));
    }
   
}
